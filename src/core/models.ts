/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/cell": {
    get: {
      parameters: {
        query: {
          x?: parameters["rowFilter.cell.x"];
          y?: parameters["rowFilter.cell.y"];
          health?: parameters["rowFilter.cell.health"];
          value?: parameters["rowFilter.cell.value"];
          letterValue?: parameters["rowFilter.cell.letterValue"];
          letter?: parameters["rowFilter.cell.letter"];
          isNatural?: parameters["rowFilter.cell.isNatural"];
          isPartOfStructure?: parameters["rowFilter.cell.isPartOfStructure"];
          biomeName?: parameters["rowFilter.cell.biomeName"];
          createdAt?: parameters["rowFilter.cell.createdAt"];
          updatedAt?: parameters["rowFilter.cell.updatedAt"];
          id?: parameters["rowFilter.cell.id"];
          placedById?: parameters["rowFilter.cell.placedById"];
          placedAt?: parameters["rowFilter.cell.placedAt"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["cell"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** cell */
          cell?: definitions["cell"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          x?: parameters["rowFilter.cell.x"];
          y?: parameters["rowFilter.cell.y"];
          health?: parameters["rowFilter.cell.health"];
          value?: parameters["rowFilter.cell.value"];
          letterValue?: parameters["rowFilter.cell.letterValue"];
          letter?: parameters["rowFilter.cell.letter"];
          isNatural?: parameters["rowFilter.cell.isNatural"];
          isPartOfStructure?: parameters["rowFilter.cell.isPartOfStructure"];
          biomeName?: parameters["rowFilter.cell.biomeName"];
          createdAt?: parameters["rowFilter.cell.createdAt"];
          updatedAt?: parameters["rowFilter.cell.updatedAt"];
          id?: parameters["rowFilter.cell.id"];
          placedById?: parameters["rowFilter.cell.placedById"];
          placedAt?: parameters["rowFilter.cell.placedAt"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          x?: parameters["rowFilter.cell.x"];
          y?: parameters["rowFilter.cell.y"];
          health?: parameters["rowFilter.cell.health"];
          value?: parameters["rowFilter.cell.value"];
          letterValue?: parameters["rowFilter.cell.letterValue"];
          letter?: parameters["rowFilter.cell.letter"];
          isNatural?: parameters["rowFilter.cell.isNatural"];
          isPartOfStructure?: parameters["rowFilter.cell.isPartOfStructure"];
          biomeName?: parameters["rowFilter.cell.biomeName"];
          createdAt?: parameters["rowFilter.cell.createdAt"];
          updatedAt?: parameters["rowFilter.cell.updatedAt"];
          id?: parameters["rowFilter.cell.id"];
          placedById?: parameters["rowFilter.cell.placedById"];
          placedAt?: parameters["rowFilter.cell.placedAt"];
        };
        body: {
          /** cell */
          cell?: definitions["cell"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/player": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.player.id"];
          created_at?: parameters["rowFilter.player.created_at"];
          name?: parameters["rowFilter.player.name"];
          x?: parameters["rowFilter.player.x"];
          y?: parameters["rowFilter.player.y"];
          uuid?: parameters["rowFilter.player.uuid"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["player"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** player */
          player?: definitions["player"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.player.id"];
          created_at?: parameters["rowFilter.player.created_at"];
          name?: parameters["rowFilter.player.name"];
          x?: parameters["rowFilter.player.x"];
          y?: parameters["rowFilter.player.y"];
          uuid?: parameters["rowFilter.player.uuid"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.player.id"];
          created_at?: parameters["rowFilter.player.created_at"];
          name?: parameters["rowFilter.player.name"];
          x?: parameters["rowFilter.player.x"];
          y?: parameters["rowFilter.player.y"];
          uuid?: parameters["rowFilter.player.uuid"];
        };
        body: {
          /** player */
          player?: definitions["player"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/stack": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.stack.id"];
          item?: parameters["rowFilter.stack.item"];
          size?: parameters["rowFilter.stack.size"];
          playerId?: parameters["rowFilter.stack.playerId"];
          cellId?: parameters["rowFilter.stack.cellId"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["stack"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** stack */
          stack?: definitions["stack"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.stack.id"];
          item?: parameters["rowFilter.stack.item"];
          size?: parameters["rowFilter.stack.size"];
          playerId?: parameters["rowFilter.stack.playerId"];
          cellId?: parameters["rowFilter.stack.cellId"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.stack.id"];
          item?: parameters["rowFilter.stack.item"];
          size?: parameters["rowFilter.stack.size"];
          playerId?: parameters["rowFilter.stack.playerId"];
          cellId?: parameters["rowFilter.stack.cellId"];
        };
        body: {
          /** stack */
          stack?: definitions["stack"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/rpc/get_target": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: public.direction */
            target: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/get_rectangle": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: integer */
            width: number;
            /** Format: integer */
            startx: number;
            /** Format: integer */
            height: number;
            /** Format: integer */
            starty: number;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/get_corners": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: integer */
            width: number;
            /** Format: integer */
            startx: number;
            /** Format: integer */
            height: number;
            /** Format: integer */
            starty: number;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
}

export interface definitions {
  cell: {
    /** Format: integer */
    x: number;
    /** Format: integer */
    y: number;
    /** Format: smallint */
    health?: number;
    /** Format: double precision */
    value?: number;
    /** Format: double precision */
    letterValue?: number;
    /** Format: character varying */
    letter?: string;
    /**
     * Format: boolean
     * @default true
     */
    isNatural?: boolean;
    /** Format: boolean */
    isPartOfStructure?: boolean;
    /** Format: character varying */
    biomeName?: string;
    /**
     * Format: time with time zone
     * @default now()
     */
    createdAt?: string;
    /**
     * Format: time with time zone
     * @default now()
     */
    updatedAt?: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `player.id`.<fk table='player' column='id'/>
     */
    placedById?: number;
    /** Format: timestamp without time zone */
    placedAt?: string;
  };
  player: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: character varying */
    name?: string;
    /** Format: integer */
    x?: number;
    /** Format: integer */
    y?: number;
    /** Format: uuid */
    uuid: string;
  };
  stack: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /** Format: character varying */
    item?: string;
    /** Format: smallint */
    size?: number;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `player.id`.<fk table='player' column='id'/>
     */
    playerId?: number;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `cell.id`.<fk table='cell' column='id'/>
     */
    cellId?: number;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description cell */
  "body.cell": definitions["cell"];
  /** Format: integer */
  "rowFilter.cell.x": string;
  /** Format: integer */
  "rowFilter.cell.y": string;
  /** Format: smallint */
  "rowFilter.cell.health": string;
  /** Format: double precision */
  "rowFilter.cell.value": string;
  /** Format: double precision */
  "rowFilter.cell.letterValue": string;
  /** Format: character varying */
  "rowFilter.cell.letter": string;
  /** Format: boolean */
  "rowFilter.cell.isNatural": string;
  /** Format: boolean */
  "rowFilter.cell.isPartOfStructure": string;
  /** Format: character varying */
  "rowFilter.cell.biomeName": string;
  /** Format: time with time zone */
  "rowFilter.cell.createdAt": string;
  /** Format: time with time zone */
  "rowFilter.cell.updatedAt": string;
  /** Format: bigint */
  "rowFilter.cell.id": string;
  /** Format: bigint */
  "rowFilter.cell.placedById": string;
  /** Format: timestamp without time zone */
  "rowFilter.cell.placedAt": string;
  /** @description player */
  "body.player": definitions["player"];
  /** Format: bigint */
  "rowFilter.player.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.player.created_at": string;
  /** Format: character varying */
  "rowFilter.player.name": string;
  /** Format: integer */
  "rowFilter.player.x": string;
  /** Format: integer */
  "rowFilter.player.y": string;
  /** Format: uuid */
  "rowFilter.player.uuid": string;
  /** @description stack */
  "body.stack": definitions["stack"];
  /** Format: bigint */
  "rowFilter.stack.id": string;
  /** Format: character varying */
  "rowFilter.stack.item": string;
  /** Format: smallint */
  "rowFilter.stack.size": string;
  /** Format: bigint */
  "rowFilter.stack.playerId": string;
  /** Format: bigint */
  "rowFilter.stack.cellId": string;
}

export interface operations {}

export interface external {}
